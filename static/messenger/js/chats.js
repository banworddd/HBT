// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞ –∏–∑ cookies
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.startsWith(name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

async function loadChats() {
    const apiUrl = `/api/messenger/chats/?user=${username}`;
    const chatsList = document.getElementById('chats-list');

    try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤');
        }

        const chats = await response.json();

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chatsList.innerHTML = '';

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
        chats.forEach(chat => {
            const chatCard = document.createElement('div');
            chatCard.className = 'chat-card';
            chatCard.dataset.chatId = chat.id;

            // –ê–≤–∞—Ç–∞—Ä —á–∞—Ç–∞
            const chatAvatar = document.createElement('img');
            chatAvatar.src = `${chat.chat_avatar}`;
            chatAvatar.alt = '–ê–≤–∞—Ç–∞—Ä —á–∞—Ç–∞';
            chatAvatar.className = 'chat-avatar';

            // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            const chatHeader = document.createElement('div');
            chatHeader.className = 'chat-header';
            const chatTitle = document.createElement('h2');

            if (chat.is_group) {
                chatTitle.textContent = chat.name || '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç';
            } else {
                chatTitle.textContent = chat.public_name_2 || `–ß–∞—Ç —Å @${chat.username_2}`;
            }

            chatHeader.appendChild(chatAvatar);
            chatHeader.appendChild(chatTitle);

            // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const lastMessage = document.createElement('div');
            lastMessage.className = 'last-message';
            const messageText = document.createElement('p');
            messageText.innerHTML = `<strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${chat.last_message_text}`;
            const messageTime = document.createElement('p');
            messageTime.innerHTML = `<small>${chat.last_message_time}</small>`;
            lastMessage.appendChild(messageText);
            lastMessage.appendChild(messageTime);

            // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —á–∞—Ç–∞
            chatCard.appendChild(chatHeader);
            chatCard.appendChild(lastMessage);
            chatsList.appendChild(chatCard);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —á–∞—Ç
            chatCard.addEventListener('click', () => {
                loadMessages(chat.id, 1); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
                showMessageForm(chat.id);  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        chatsList.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
}

let currentPage = 1;
let isLoading = false;
let hasNextPage = true; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

async function loadMessages(chatId, page = currentPage) {
    const apiUrl = `/api/messenger/chat_messages_list/?chat_id=${chatId}&page=${page}`;
    const messagesList = document.getElementById('messages-list');

    if (isLoading) return;
    isLoading = true;

    try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }

        const data = await response.json();
        const messages = data.results;

        // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (page === 1) {
            messagesList.innerHTML = '';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        messages.forEach(message => {
            const messageCard = document.createElement('div');
            messageCard.className = 'message-card ' + (message.author_username === username ? 'self' : 'other');
            messageCard.dataset.messageId = message.id;

            const messageBubble = document.createElement('div');
            messageBubble.className = 'message-bubble ' + (message.author_username === username ? 'self' : 'other');

            const messageText = document.createElement('p');
            messageText.className = 'message-text';
            messageText.textContent = message.text;

            const messageTime = document.createElement('p');
            messageTime.className = 'message-time';
            messageTime.textContent = formatDateTime(message.send_time);

            messageBubble.appendChild(messageText);
            messageBubble.appendChild(messageTime);
            messageCard.appendChild(messageBubble);

            if (message.author_username === username) {
                const deleteButton = document.createElement('button');
                deleteButton.textContent = '–£–¥–∞–ª–∏—Ç—å';
                deleteButton.className = 'delete-button';
                deleteButton.addEventListener('click', () => deleteMessage(message.id));
                messageCard.appendChild(deleteButton);

                const editButton = document.createElement('button');
                editButton.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
                editButton.className = 'edit-button';
                editButton.addEventListener('click', () => showEditMessageForm(message.id, message.text, message.picture));
                messageCard.appendChild(editButton);
            }

            const reactionsContainer = document.createElement('div');
            reactionsContainer.className = 'reactions';
            messageCard.appendChild(reactionsContainer);

            const reactions = ['üëç', 'üëé', '‚ù§Ô∏è', 'üòä'];
            reactions.forEach(reaction => {
                const reactionButton = document.createElement('button');
                reactionButton.className = 'reaction-btn';
                reactionButton.dataset.reaction = reaction;
                reactionButton.dataset.messageId = message.id;
                reactionButton.innerHTML = `${reaction} <span class="reaction-count">0</span>`;
                reactionButton.addEventListener('click', () => handleReaction(message.id, reaction));
                reactionsContainer.appendChild(reactionButton);
            });

            messagesList.prepend(messageCard); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            loadReactions(message.id);
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (data.next) {
            currentPage = page + 1;
        } else {
            currentPage = page;
            hasNextPage = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç
        }

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (page === 1) {
            messagesList.scrollTop = messagesList.scrollHeight;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        messagesList.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    } finally {
        isLoading = false;
    }
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function handleScroll(chatId) {
    const messagesList = document.getElementById('messages-list');
    const threshold = 100; // –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    if (messagesList.scrollTop < threshold && !isLoading && hasNextPage) {
        loadMessages(chatId, currentPage);
    }
}

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
function showMessageForm(chatId) {
    const messageForm = document.getElementById('message-form');
    messageForm.style.display = 'block';

    const form = document.getElementById('send-message-form');
    form.onsubmit = async (event) => {
        event.preventDefault();

        const text = document.getElementById('text').value;
        const picture = document.getElementById('picture').files[0];

        try {
            await sendMessage(chatId, text, picture);
            form.reset();
            loadMessages(chatId, 1); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        } catch (error) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
    currentPage = 1;
    hasNextPage = true; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    loadMessages(chatId, 1);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const messagesList = document.getElementById('messages-list');
    messagesList.removeEventListener('scroll', () => handleScroll(chatId));
    messagesList.addEventListener('scroll', () => handleScroll(chatId));
}




// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
async function createReaction(messageId, reaction, userId) {
    const apiUrl = `/api/messenger/message_reaction_create/?message_id=${messageId}`;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken'),
        },
        body: JSON.stringify({
            reaction: reaction,
            message: messageId,
            author: userId // –¢–æ–ª—å–∫–æ —Ä–µ–∞–∫—Ü–∏—è, message_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL
        }),
    });

    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏');
    }
}

async function handleReaction(messageId, reaction) {
    try {
        const response = await fetch(`/api/messenger/message_reactions_count/?message_id=${messageId}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∞–∫—Ü–∏–π');
        }

        const reactions = await response.json();
        const reactionData = reactions.find(r => r.reaction === reaction);

        if (reactionData?.user_reacted) {
            // –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è —É–∂–µ —Å—Ç–æ–∏—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
            await deleteReaction(reactionData.user_reaction_id, messageId);
        } else {
            // –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
            await createReaction(messageId, reaction, userId);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await loadReactions(messageId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}


async function deleteReaction(reactionId, messageId) {
    const response = await fetch(`/api/messenger/message_reactions_detail/${reactionId}/`, {
        method: 'DELETE',
        headers: {
            'X-CSRFToken': getCookie('csrftoken'),
        },
    });

    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('–†–µ–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è messageId:', messageId);
    await loadReactions(messageId);
}

async function loadReactions(messageId) {
    try {
        const response = await fetch(`/api/messenger/message_reactions_count/?message_id=${messageId}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∞–∫—Ü–∏–π');
        }

        const reactions = await response.json();
        const reactionsContainer = document.querySelector(`.message-card[data-message-id="${messageId}"] .reactions`);

        if (!reactionsContainer) {
            return;
        }

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
        const allReactions = ['üëç', 'üëé', '‚ù§Ô∏è', 'üòä'];

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
        allReactions.forEach(reaction => {
            const reactionButton = reactionsContainer.querySelector(`.reaction-btn[data-reaction="${reaction}"]`);

            if (reactionButton) {
                // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏
                const reactionData = reactions.find(r => r.reaction === reaction);

                if (reactionData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
                    const countElement = reactionButton.querySelector('.reaction-count');
                    if (countElement) {
                        countElement.textContent = reactionData.count;
                    }

                    // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é
                    if (reactionData.user_reacted) {
                        reactionButton.style.backgroundColor = 'green';
                        reactionButton.style.color = 'white';
                    } else {
                        reactionButton.style.backgroundColor = '';
                        reactionButton.style.color = '';
                    }
                } else {
                    // –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    const countElement = reactionButton.querySelector('.reaction-count');
                    if (countElement) {
                        countElement.textContent = '0';
                    }

                    reactionButton.style.backgroundColor = '';
                    reactionButton.style.color = '';
                }
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∞–∫—Ü–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function deleteMessage(messageId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) {
        try {
            const response = await fetch(`/api/messenger/chat_message_delete/${messageId}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken'),
                },
                body: JSON.stringify({ is_deleted: true }),
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            const chatId = document.querySelector('.chat-card.active')?.dataset.chatId;
            if (chatId) {
                loadMessages(chatId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, picture) {
    const formData = new FormData();
    if (text) {
        formData.append('text', text);
    }
    formData.append('chat', chatId);
    if (picture) {
        formData.append('picture', picture);
    }

    try {
        const response = await fetch(`/api/messenger/chat_messages_list/?chat_id=${chatId}`, {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken'),
            },
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }

        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function updateMessage(messageId, text, picture, removePicture) {
    const formData = new FormData();
    if (text) {
        formData.append('text', text);
    }
    if (picture) {
        formData.append('picture', picture);
    }
    if (removePicture) {
        formData.append('picture', '');  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    }

    try {
        const response = await fetch(`/api/messenger/chat_message_update/${messageId}/`, {
            method: 'PATCH',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken'),
            },
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }

        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function showEditMessageForm(messageId, currentText, currentPicture) {
    const editForm = document.getElementById('edit-message-form');
    editForm.style.display = 'block';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    document.getElementById('edit-text').value = currentText;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const form = document.getElementById('edit-message-form-content');
    form.onsubmit = async (event) => {
        event.preventDefault();

        const text = document.getElementById('edit-text').value;
        const picture = document.getElementById('edit-picture').files[0];
        const removePicture = document.getElementById('remove-picture').checked;

        try {
            await updateMessage(messageId, text, picture, removePicture);
            editForm.style.display = 'none';  // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            const chatId = document.querySelector('.chat-card.active')?.dataset.chatId;
            if (chatId) {
                loadMessages(chatId);  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            }
        } catch (error) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('cancel-edit').onclick = () => {
        editForm.style.display = 'none';  // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    };
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
function formatDateTime(dateTimeString) {
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false,
    };
    const date = new Date(dateTimeString);
    const formattedDate = date.toLocaleDateString('de-DE', options).replace(',', ''); // 'de-DE' –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const formattedTime = date.toLocaleTimeString('de-DE', options);
    return `${formattedDate} ${formattedTime}`;
}
// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadChats);